//  Copyright (c) 2023-present John Roscoe Hamilton
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace TestCodeGen;
[Generator]
public partial class CodeGen : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new ClassSyntaxReceiver("RecData"));
#if DEBUG
        // Uncomment to debug code generation:
        //if (!System.Diagnostics.Debugger.IsAttached)
        //{
        //    System.Diagnostics.Debugger.Launch();
        //    return;
        //}
#endif
    }
    public void Execute(GeneratorExecutionContext context)
    {
        ClassSyntaxReceiver sr = (ClassSyntaxReceiver)context.SyntaxReceiver;
        GenDataClasses(context, sr);
    }
    private static void GenDataClasses(GeneratorExecutionContext context, ClassSyntaxReceiver sr)
    {
        foreach (var c in sr.Classes)
        {
            var comp = context.Compilation;
            var src = Generate(comp, c, out string className);
            SourceText sourceText = src.Source();
            context.AddSource($"{className}.gen.cs", sourceText);
        }
    }
    private static CodeWriter Generate(Compilation comp, ClassDeclarationSyntax cds, out string className)
    {
        var cw = new CodeWriter();
        ClassInfo c = new ClassInfo(comp, cds);
        className = c.Name;
        cw.line = $"/// <auto-generated/>";
        cw.line = "using WFLib;";
        cw.line = $"namespace {c.Namespace};";
        foreach (var line in c.Comments)
        {
            cw.line = "// " + line;
        }
        cw.line = $"public partial class {c.Name} : RecData";
        cw.line = "{";
        cw.line = $"public override void Clear() {{}}";
        cw.line = $"public override void Init() {{}}";
        cw.line = "}";
        return cw;
    }
}